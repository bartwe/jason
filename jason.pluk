import pluk.io;

class jason : Application
{
  override void Main()
  {
    for (var x in Arguments.Skip(1))
    {
      List<String> input = new();
      scope (var fs = new FileStream(x))
      {
        StreamReader reader = new(fs);
        while (true)
        {
          var line = reader.ReadLineOrEof();
          if (!?line)
            break;
          input.Add(~line);
        }
      }
      var output = ProcessJson(input);
      File.Delete(x);
      scope (var fs = new FileStream(x))
      {
        StreamWriter writer = new(fs);
        writer.Write(output);
      }
    }
  }


  int line = 1;
  int offset = 1;
  Stack<int> stateStack = new();
  List<String> stream = new();
  int mode = 0;
  int idx = 0;
  StringBuilder output = new();
  int indentDepth = 0;
  bool needsIndent = true;
  bool openedArray = false;
  bool number = false;
  
  void NumberWritten()
  {
    number = true;
  }
  
  void TokenNumber(String text)
  {
    if (needsIndent)
    {
      if (indentDepth > 0)
        output.Append("".PadLeft(" ", indentDepth*2));
    }
    else if (!openedArray)
      output.Append(" ");
    needsIndent = false;
    output.Append(text);
    openedArray = false;
    number = false;
  }
  
  void Token(String text)
  {
    if (needsIndent)
    {
      if (indentDepth > 0)
        output.Append("".PadLeft(" ", indentDepth*2));
    }
    else if ((text != "]") || (!number))
      output.Append(" ");
    needsIndent = false;
    output.Append(text);
    openedArray = (text == "[");
    number = false;
  }
  
  void TokenNoSpace(String text)
  {
    if (needsIndent)
    {
      if (indentDepth > 0)
        output.Append("".PadLeft(" ", indentDepth*2));
    }
    needsIndent = false;
    output.Append(text);
    openedArray = false;
    number = false;
  }
  
  void Raw(String text)
  {
    output.Append(text);
    openedArray = false;
    number = false;
  }

  void Line()
  {
    output.Append("\n");
    needsIndent = true;
    openedArray = false;
    number = false;
  }
  
  String ProcessJson(List<String> input)
  {
    StringBuilder sb = new();
    for (var line in input)
    {
      sb.Append(line);
      sb.Append("\n");
    }
    
    line = 1;
    offset = 1;
    stateStack = new();
    stream = new(sb.ToString().Characters);
    mode = 0;
    idx = 0;
    output = new();
    indentDepth = 0;
    needsIndent = true;

    while(true)
    {
      if (idx == stream.Count)
      {
        if (mode == 2)
          break;
        throw new Exception("Unexpected end of file.");
      }
      if ((mode == 0) || (mode == 2)
       || (mode == 3) || (mode == 31) || (mode == 32) || (mode == 33)
       || (mode == 4) || (mode == 41)
       || (mode == 5) || (mode == 6))
      {
        // whitespace eater
        if ((stream[idx] == " ") || (stream[idx] == "\t"))
        {
          idx = idx + 1;
          offset = offset + 1;
          continue;
        }
        if (stream[idx] == "\n")
        {
          idx = idx + 1;
          offset = 1;
          line = line + 1;
          Line();
          continue;
        }
        if (stream[idx] == "#")
        {
          Token("");
          stateStack.Push(mode);
          mode = 1;
          continue;
        }
        if (stream[idx] == "/")
        {
          Token("");
          stateStack.Push(mode);
          mode = 1;
          continue;
        }
      }

      if (mode == 0)
      {
        //initial mode
        if (stream[idx] == "{")
        {
          Token("{");
          indentDepth = indentDepth + 1;
          stateStack.Push(2);
          mode = 3;
          idx = idx + 1;
          offset = offset + 1;
          line = line + 1;
          continue;
        }
        if (stream[idx] == "[")
        {
          Token("[");
          indentDepth = indentDepth + 1;
          stateStack.Push(2);
          mode = 4;
          idx = idx + 1;
          offset = offset + 1;
          line = line + 1;
          continue;
        }
        // starbound json normally doesn't include an immediate at toplevel, feel free to extend
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: '<value> expected.'");
      }
      if (mode == 1)
      {
        // comment line
        if (stream[idx] == "\n")
        {
          Line();
          idx = idx + 1;
          offset = 1;
          line = line + 1;
          mode = stateStack.Pop();
          continue;
        }
        Raw(stream[idx]);
        idx = idx + 1;
        offset = offset + 1;
        continue;
      }
      if (mode == 2)
      {
        // end of document mode
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: 'End of document expected.'");
      }
      if (mode == 3)
      {
        // object mode
        if (stream[idx] == "}")
        {
          indentDepth = indentDepth - 1;
          Token("}");
          idx = idx + 1;
          offset = offset + 1;
          mode = stateStack.Pop();
          continue;
        }
        if (stream[idx] == "\"")
        {
          stateStack.Push(31);
          mode = 5;
          continue;
        }
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: '<string> or } expected.'");
      }
      if (mode == 31)
      {
        if (stream[idx] == ":")
        {
          Token(":");
          idx = idx + 1;
          offset = offset + 1;
          stateStack.Push(32);
          mode = 6;
          continue;
        }
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: ': expected.'");
      }
      if (mode == 32)
      {
        if (stream[idx] == "}")
        {
          indentDepth = indentDepth - 1;
          Token("}");
          idx = idx + 1;
          offset = offset + 1;
          mode = stateStack.Pop();
          continue;
        }
        if (stream[idx] == ",")
        {
          TokenNoSpace(",");
          idx = idx + 1;
          offset = offset + 1;
          mode = 33;
          continue;
        }
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: ', or } expected.'");
      }
      if (mode == 33)
      {
        if (stream[idx] == "\"")
        {
          stateStack.Push(31);
          mode = 5;
          continue;
        }
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: '<string> expected, maybe a dangling ',' on the previous line?'");
      }
      if (mode == 4)
      {
        // array mode
        if (stream[idx] == "]")
        {
          indentDepth = indentDepth - 1;
          Token("]");
          idx = idx + 1;
          offset = offset + 1;
          mode = stateStack.Pop();
          continue;
        }
        stateStack.Push(41);
        mode = 6;
      }
      if (mode == 41)
      {
        if (stream[idx] == "]")
        {
          indentDepth = indentDepth - 1;
          Token("]");
          idx = idx + 1;
          offset = offset + 1;
          mode = stateStack.Pop();
          continue;
        }
        if (stream[idx] == ",")
        {
          TokenNoSpace(",");
          idx = idx + 1;
          offset = offset + 1;
          stateStack.Push(41);
          mode = 6;
          continue;
        }
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: '] or , expected, missing an , on the previous line maybe ?");
      }
      if (mode == 5)
      {
        // string mode
        if (stream[idx] == "\"")
        {
          Token("");
          Raw(stream[idx]);
          int startline = line;
          int startoffset = offset;
          idx = idx + 1;
          offset = offset + 1;
          bool escaped = false;
          while (true)
          {
            if (idx == stream.Count)
              throw new Exception("Unclosed string literal started at line: "+startline+" offset: "+startoffset);
            Raw(stream[idx]);
            if (stream[idx] == "\n")
            {
              idx = idx + 1;
              offset = 1;
              line = line + 1;
              continue;
            }
            if (!escaped && (stream[idx] == "\\"))
            {
              idx = idx + 1;
              offset = offset + 1;
              escaped = true;
              continue;
            }
            if (!escaped&& (stream[idx] == "\""))
            {
              idx = idx + 1;
              offset = offset + 1;
              break;
            }
            idx = idx + 1;
            offset = offset + 1;
            escaped = false;
          }
          mode = stateStack.Pop();
          continue;
        }
        throw new Exception("Unexpected character: '"+stream[idx]+"' at line: "+line+" offset: "+offset+" Reason: '\" expected, malformed string constant.'");
      }
      if (mode == 6)
      {
        // value mode
        if (stream[idx] == "{")
        {
          Token(stream[idx]);
          indentDepth = indentDepth + 1;
          idx = idx + 1;
          offset = offset + 1;
          mode = 3;
          continue;
        }
        if (stream[idx] == "[")
        {
          Token(stream[idx]);
          indentDepth = indentDepth + 1;
          idx = idx + 1;
          offset = offset + 1;
          mode = 4;
          continue;
        }
        if ((stream[idx] == "t") && (idx+4 <= stream.Count) && (stream[idx+1] == "r") && (stream[idx+2] == "u") && (stream[idx+3] == "e"))
        {
          Token("true");
          idx = idx + 4;
          offset = offset + 4;
          mode = stateStack.Pop();
          continue;
        }
        if ((stream[idx] == "f") && (idx+5 <= stream.Count) && (stream[idx+1] == "a") && (stream[idx+2] == "l") && (stream[idx+3] == "s") && (stream[idx+4] == "e"))
        {
          Token("false");
          idx = idx + 5;
          offset = offset + 5;
          mode = stateStack.Pop();
          continue;
        }
        if ((stream[idx] == "n") && (idx+4 <= stream.Count) && (stream[idx+1] == "u") && (stream[idx+2] == "l") && (stream[idx+3] == "l"))
        {
          Token("null");
          idx = idx + 4;
          offset = offset + 4;
          mode = stateStack.Pop();
          continue;
        }
        if (stream[idx] == "\"")
        {
          mode = 5;
          continue;
        }
        
        TokenNumber("");
        
        // number
        if (stream[idx] == "-")
        {
          Raw(stream[idx]);
          idx = idx + 1;
          offset = offset + 1;
        }
        while ((stream[idx] == "0") ||
          (stream[idx] == "1") ||
          (stream[idx] == "2") ||
          (stream[idx] == "3") ||
          (stream[idx] == "4") ||
          (stream[idx] == "5") ||
          (stream[idx] == "6") ||
          (stream[idx] == "7") ||
          (stream[idx] == "8") ||
          (stream[idx] == "9"))
        {
          Raw(stream[idx]);
          idx = idx + 1;
          offset = offset + 1;
        }
        if (stream[idx] == ".")
        {
          Raw(stream[idx]);
          idx = idx + 1;
          offset = offset + 1;
          while ((stream[idx] == "0") ||
            (stream[idx] == "1") ||
            (stream[idx] == "2") ||
            (stream[idx] == "3") ||
            (stream[idx] == "4") ||
            (stream[idx] == "5") ||
            (stream[idx] == "6") ||
            (stream[idx] == "7") ||
            (stream[idx] == "8") ||
            (stream[idx] == "9"))
          {
            Raw(stream[idx]);
            idx = idx + 1;
            offset = offset + 1;
          }
        }
        if ((stream[idx] == "e") || (stream[idx] == "E"))
        {
          Raw(stream[idx]);
          idx = idx + 1;
          offset = offset + 1;
          if ((stream[idx] == "+") || (stream[idx] == "-"))
          {
            Raw(stream[idx]);
            idx = idx + 1;
            offset = offset + 1;
          }
          while ((stream[idx] == "0") ||
            (stream[idx] == "1") ||
            (stream[idx] == "2") ||
            (stream[idx] == "3") ||
            (stream[idx] == "4") ||
            (stream[idx] == "5") ||
            (stream[idx] == "6") ||
            (stream[idx] == "7") ||
            (stream[idx] == "8") ||
            (stream[idx] == "9"))
          {
            Raw(stream[idx]);
            idx = idx + 1;
            offset = offset + 1;
          }
        }
        NumberWritten();
        mode = stateStack.Pop();
        continue;
      }
    }
    return output.ToString();
  }
}